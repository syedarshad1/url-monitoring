
owner: syedarshad1 # Replace with your GitHub username
repo: url-monitoring        # The name of your repository

sites:
  - name: FIS API Health
    url: https://api-gw1-prod1.fisglobal.com/gw/v1/health
    method: GET
    expectStatus: 200
    maxResponseTime: 5000

status-website:
  # Uncomment the `baseUrl` line if you don't have a custom domain and add your repo name there
  baseUrl: /url-monitoring
  logoUrl: https://raw.githubusercontent.com/upptime/upptime.js.org/master/static/img/icon.svg
  name: Upptime
  introTitle: "**Upptime** is the open-source uptime monitor and status page, powered entirely by GitHub."
  introMessage: This is a sample status page which uses **real-time** data from our GitHub repository. No server required â€” just GitHub Actions, Issues, and Pages. **Get your own for free**
  navbar:
    - title: Status
      href: /
    - title: GitHub
      href: https://github.com/$OWNER/$REPO

name: URL Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  workflow_dispatch:       # Allows manual triggering

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Run URL monitor script
        run: |
          python <<EOF
          import requests
          from datetime import datetime

          def monitor_url(url):
              report = {
                  "URL": url,
                  "Start Time": None,
                  "End Time": None,
                  "Total Time Taken": None,
                  "HTTP Status Code": None,
                  "Status": None,
                  "Failure Reason": None
              }

              start_time = datetime.now()
              report["Start Time"] = start_time.isoformat()

              try:
                  response = requests.get(url)
                  end_time = datetime.now()
                  report["End Time"] = end_time.isoformat()
                  report["Total Time Taken"] = (end_time - start_time).total_seconds()
                  report["HTTP Status Code"] = response.status_code
                  report["Status"] = "Success" if response.status_code == 200 else "Failure"
                  if response.status_code != 200:
                      report["Failure Reason"] = f"HTTP Status Code: {response.status_code}"
              except Exception as e:
                  end_time = datetime.now()
                  report["End Time"] = end_time.isoformat()
                  report["Total Time Taken"] = (end_time - start_time).total_seconds()
                  report["Status"] = "Failure"
                  report["Failure Reason"] = str(e)

              with open("url_monitoring_report.md", "w") as f:
                  f.write(f"""## URL Monitoring Report

- **URL:** {report['URL']}
- **Start Time:** {report['Start Time']}
- **End Time:** {report['End Time']}
- **Total Time Taken:** {report['Total Time Taken']} seconds
- **HTTP Status Code:** {report['HTTP Status Code']}
- **Status:** {report['Status']}
- **Failure Reason:** {report['Failure Reason'] if report['Failure Reason'] else 'N/A'}
""")

          monitor_url("https://api-gw1-prod1.fisglobal.com/gw/v1/health")
          EOF

      - name: Commit report
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add url_monitoring_report.md
          git commit -m "Update URL monitoring report" || echo "No changes to commit"
          git push
